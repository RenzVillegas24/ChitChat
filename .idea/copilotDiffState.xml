<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/moonbase/chitchat/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/moonbase/chitchat/MainActivity.kt" />
              <option name="originalContent" value="package com.moonbase.chitchat&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material.icons.outlined.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.zIndex&#10;import com.moonbase.chitchat.ui.theme.ChitChatTheme&#10;import com.moonbase.chitchat.ui.ChatDetailScreen&#10;import com.moonbase.chitchat.ui.ChatDetailData&#10;import com.moonbase.chitchat.ui.Message&#10;import dev.chrisbanes.haze.HazeDefaults&#10;import dev.chrisbanes.haze.HazeInputScale&#10;import dev.chrisbanes.haze.HazeProgressive&#10;import dev.chrisbanes.haze.HazeState&#10;import dev.chrisbanes.haze.HazeStyle&#10;import dev.chrisbanes.haze.HazeTint&#10;import dev.chrisbanes.haze.hazeEffect&#10;import dev.chrisbanes.haze.hazeSource&#10;import java.time.LocalDateTime&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;&#10;data class OnlineUser(&#10;    val id: String,&#10;    val name: String,&#10;    val avatarColor: Color = Color.Blue,&#10;    val isOnline: Boolean = true&#10;)&#10;&#10;enum class MessageStatus {&#10;    SENT,      // One check&#10;    DELIVERED  // Double check&#10;}&#10;&#10;data class ChatItem(&#10;    val id: String,&#10;    val name: String,&#10;    val lastMessage: String,&#10;    val time: String,&#10;    val dateTime: LocalDateTime,&#10;    val isGroup: Boolean,&#10;    val unreadCount: Int = 0,&#10;    val avatarColor: Color = Color.Blue,&#10;    val isFavorite: Boolean = false,&#10;    val messageStatus: MessageStatus = MessageStatus.DELIVERED,&#10;    val destination: String = &quot;individual&quot; // &quot;individual&quot;, &quot;group&quot;,  &quot;channel&quot;&#10;)&#10;&#10;data class GroupedChatItems(&#10;    val dateGroup: String,&#10;    val chats: List&lt;ChatItem&gt;&#10;)&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ChitChatTheme {&#10;                ChitChatApp()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun hazeStyle (&#10;    colorScheme: Color,&#10;    blurRadius: Dp = 16.dp,&#10;    noiseFactor: Float = HazeDefaults.noiseFactor&#10;): HazeStyle {&#10;    return HazeStyle(&#10;        backgroundColor = colorScheme,&#10;        tints = listOf(HazeTint(colorScheme)),&#10;        blurRadius = blurRadius,&#10;        noiseFactor = noiseFactor&#10;    )&#10;}&#10;&#10;fun formatDateForChat(dateTime: LocalDateTime): String {&#10;    val now = LocalDateTime.now()&#10;    val daysBetween = ChronoUnit.DAYS.between(dateTime.toLocalDate(), now.toLocalDate())&#10;    val yearsBetween = ChronoUnit.YEARS.between(dateTime, now)&#10;&#10;    return when {&#10;        daysBetween == 0L -&gt; dateTime.format(DateTimeFormatter.ofPattern(&quot;h:mm a&quot;))&#10;        daysBetween == 1L -&gt; &quot;Yesterday&quot;&#10;        daysBetween &lt;= 7L -&gt; dateTime.format(DateTimeFormatter.ofPattern(&quot;EEEE&quot;))&#10;        yearsBetween == 0L -&gt; dateTime.format(DateTimeFormatter.ofPattern(&quot;MMM d&quot;))&#10;        else -&gt; dateTime.format(DateTimeFormatter.ofPattern(&quot;MMM d, yyyy&quot;))&#10;    }&#10;}&#10;&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChitChatApp() {&#10;    var selectedFilters by remember { mutableStateOf(setOf(&quot;all&quot;)) }&#10;    var selectedChat by remember { mutableStateOf&lt;ChatItem?&gt;(null) }&#10;    val hazeState = remember { HazeState() }&#10;&#10;    // Navigation: Show chat detail if a chat is selected, otherwise show chat list&#10;    if (selectedChat != null) {&#10;        val chatDetailData = createChatDetailData(selectedChat!!)&#10;        ChatDetailScreen(&#10;            chatData = chatDetailData,&#10;            onBackClick = { selectedChat = null }&#10;        )&#10;    } else {&#10;        ChatListScreen(&#10;            selectedFilters = selectedFilters,&#10;            onFilterChanged = { filter -&gt;&#10;                selectedFilters = when {&#10;                    filter == &quot;all&quot; -&gt; setOf(&quot;all&quot;)&#10;                    filter == &quot;group&quot; &amp;&amp; selectedFilters.contains(&quot;chat&quot;) -&gt; {&#10;                        (selectedFilters - &quot;chat&quot; + filter).takeIf { &quot;all&quot; !in it } ?: setOf(filter)&#10;                    }&#10;                    filter == &quot;chat&quot; &amp;&amp; selectedFilters.contains(&quot;group&quot;) -&gt; {&#10;                        (selectedFilters - &quot;group&quot; + filter).takeIf { &quot;all&quot; !in it } ?: setOf(filter)&#10;                    }&#10;                    selectedFilters.contains(filter) -&gt; {&#10;                        val newFilters = selectedFilters - filter&#10;                        if (newFilters.isEmpty()) setOf(&quot;all&quot;) else newFilters&#10;                    }&#10;                    else -&gt; {&#10;                        val newFilters = selectedFilters - &quot;all&quot; + filter&#10;                        newFilters.takeIf { it.isNotEmpty() } ?: setOf(&quot;all&quot;)&#10;                    }&#10;                }&#10;            },&#10;            onChatClick = { chat -&gt; selectedChat = chat },&#10;            hazeState = hazeState&#10;        )&#10;    }&#10;}&#10;&#10;// Helper function to create sample messages for chat detail&#10;fun createChatDetailData(chatItem: ChatItem): ChatDetailData {&#10;    val now = LocalDateTime.now()&#10;    &#10;    val sampleMessages = when (chatItem.id) {&#10;        &quot;1&quot; -&gt; listOf(&#10;            Message(&quot;m1&quot;, &quot;Hey, how are you?&quot;, now.minusHours(3), false, &quot;John Doe&quot;, chatItem.avatarColor),&#10;            Message(&quot;m2&quot;, &quot;I'm doing great! How about you?&quot;, now.minusHours(2).minusMinutes(45), true),&#10;            Message(&quot;m3&quot;, &quot;Pretty good, just working on some projects&quot;, now.minusHours(2).minusMinutes(30), false, &quot;John Doe&quot;, chatItem.avatarColor),&#10;            Message(&quot;m4&quot;, &quot;That sounds interesting! What kind of projects?&quot;, now.minusHours(2).minusMinutes(15), true),&#10;            Message(&quot;m5&quot;, &quot;Mostly mobile app development. I'm learning Jetpack Compose&quot;, now.minusHours(2), false, &quot;John Doe&quot;, chatItem.avatarColor)&#10;        )&#10;        &quot;2&quot; -&gt; listOf(&#10;            Message(&quot;g1&quot;, &quot;Don't forget about dinner tonight!&quot;, now.minusHours(4), false, &quot;Mom&quot;, Color(0xFFE91E63)),&#10;            Message(&quot;g2&quot;, &quot;What time again?&quot;, now.minusHours(3).minusMinutes(45), false, &quot;Dad&quot;, Color(0xFF2196F3)),&#10;            Message(&quot;g3&quot;, &quot;7 PM, as usual &quot;, now.minusHours(3).minusMinutes(30), false, &quot;Mom&quot;, Color(0xFFE91E63)),&#10;            Message(&quot;g4&quot;, &quot;I'll be there!&quot;, now.minusHours(3).minusMinutes(15), true),&#10;            Message(&quot;g5&quot;, &quot;Perfect! See you all then&quot;, now.minusHours(3), false, &quot;Mom&quot;, Color(0xFFE91E63))&#10;        )&#10;        else -&gt; listOf(&#10;            Message(&quot;default1&quot;, &quot;Hello!&quot;, now.minusHours(1), false, chatItem.name, chatItem.avatarColor),&#10;            Message(&quot;default2&quot;, &quot;Hi there!&quot;, now.minusMinutes(30), true),&#10;            Message(&quot;default3&quot;, chatItem.lastMessage, now.minusMinutes(15), false, chatItem.name, chatItem.avatarColor)&#10;        )&#10;    }&#10;    &#10;    return ChatDetailData(&#10;        id = chatItem.id,&#10;        name = chatItem.name,&#10;        isGroup = chatItem.isGroup,&#10;        avatarColor = chatItem.avatarColor,&#10;        messages = sampleMessages&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChatListScreen(&#10;    selectedFilters: Set&lt;String&gt;,&#10;    onFilterChanged: (String) -&gt; Unit,&#10;    onChatClick: (ChatItem) -&gt; Unit,&#10;    hazeState: HazeState&#10;) {&#10;    val onlineUsers = remember {&#10;        listOf(&#10;            OnlineUser(&quot;u1&quot;, &quot;Alice&quot;, Color(0xFF9C27B0)),&#10;            OnlineUser(&quot;u2&quot;, &quot;Bob&quot;, Color(0xFF2196F3)),&#10;            OnlineUser(&quot;u3&quot;, &quot;Charlie&quot;, Color(0xFF4CAF50)),&#10;            OnlineUser(&quot;u4&quot;, &quot;Diana&quot;, Color(0xFFFF9800)),&#10;            OnlineUser(&quot;u5&quot;, &quot;Eve&quot;, Color(0xFFF44336)),&#10;            OnlineUser(&quot;u6&quot;, &quot;Frank&quot;, Color(0xFF795548)),&#10;            OnlineUser(&quot;u7&quot;, &quot;Grace&quot;, Color(0xFF607D8B))&#10;        )&#10;    }&#10;&#10;    val now = LocalDateTime.now()&#10;    val sampleChats = remember {&#10;        listOf(&#10;            ChatItem(&quot;1&quot;, &quot;John Doe&quot;, &quot;Hey, how are you?&quot;, &quot;2:30 PM&quot;, now.minusHours(2), false, 2, Color.Blue, true, MessageStatus.DELIVERED, &quot;individual&quot;),&#10;            ChatItem(&quot;2&quot;, &quot;Family Group&quot;, &quot;Mom: Dinner at 7 PM&quot;, &quot;1:45 PM&quot;, now.minusHours(3), true, 5, Color.Green, true, MessageStatus.SENT, &quot;group&quot;),&#10;            ChatItem(&quot;3&quot;, &quot;Sarah Wilson&quot;, &quot;Thanks for the help!&quot;, &quot;12:20 PM&quot;, now.minusHours(5), false, 0, Color(0xFF9C27B0), false, MessageStatus.DELIVERED, &quot;individual&quot;),&#10;            ChatItem(&quot;4&quot;, &quot;Work Team&quot;, &quot;Meeting tomorrow at 10 AM&quot;, formatDateForChat(now.minusDays(1).minusHours(2)), now.minusDays(1).minusHours(2), true, 1, Color(0xFFFF9800), true, MessageStatus.DELIVERED, &quot;group&quot;),&#10;            ChatItem(&quot;5&quot;, &quot;Mike Johnson&quot;, &quot;Sure, see you then&quot;, formatDateForChat(now.minusDays(1).minusHours(5)), now.minusDays(1).minusHours(5), false, 0, Color.Red, false, MessageStatus.SENT, &quot;individual&quot;),&#10;            ChatItem(&quot;6&quot;, &quot;College Friends&quot;, &quot;Anyone up for movies?&quot;, formatDateForChat(now.minusDays(2)), now.minusDays(2), true, 3, Color(0xFF009688), false, MessageStatus.DELIVERED, &quot;group&quot;),&#10;            ChatItem(&quot;7&quot;, &quot;Alice Brown&quot;, &quot;Happy birthday! &quot;, formatDateForChat(now.minusDays(8)), now.minusDays(8), false, 1, Color(0xFFE91E63), false, MessageStatus.DELIVERED, &quot;individual&quot;),&#10;            ChatItem(&quot;8&quot;, &quot;Gaming Squad&quot;, &quot;New game tonight?&quot;, formatDateForChat(now.minusDays(10)), now.minusDays(10), true, 7, Color.Cyan, false, MessageStatus.SENT, &quot;group&quot;),&#10;            ChatItem(&quot;9&quot;, &quot;Mom&quot;, &quot;Don't forget to call&quot;, formatDateForChat(now.minusDays(15)), now.minusDays(15), false, 0, Color(0xFF8BC34A), true, MessageStatus.DELIVERED, &quot;individual&quot;),&#10;            ChatItem(&quot;10&quot;, &quot;Project Team&quot;, &quot;Final presentation ready&quot;, formatDateForChat(now.minusMonths(1).minusDays(5)), now.minusMonths(1).minusDays(5), true, 0, Color(0xFF3F51B5), false, MessageStatus.DELIVERED, &quot;group&quot;),&#10;            ChatItem(&quot;11&quot;, &quot;Old Friend&quot;, &quot;Long time no see!&quot;, formatDateForChat(now.minusYears(1).minusMonths(2)), now.minusYears(1).minusMonths(2), false, 0, Color(0xFF795548), false, MessageStatus.SENT, &quot;individual&quot;),&#10;            ChatItem(&quot;12&quot;, &quot;Support Channel&quot;, &quot;Update available&quot;, formatDateForChat(now.minusYears(1).minusMonths(6)), now.minusYears(1).minusMonths(6), false, 0, Color(0xFF607D8B), false, MessageStatus.DELIVERED, &quot;channel&quot;)&#10;        )&#10;    }&#10;&#10;    val filteredChats = remember(selectedFilters, sampleChats) {&#10;        sampleChats.filter { chat -&gt;&#10;            when {&#10;                selectedFilters.contains(&quot;all&quot;) -&gt; true&#10;                selectedFilters.contains(&quot;unread&quot;) &amp;&amp; chat.unreadCount &gt; 0 -&gt; true&#10;                selectedFilters.contains(&quot;group&quot;) &amp;&amp; chat.isGroup -&gt; true&#10;                selectedFilters.contains(&quot;chat&quot;) &amp;&amp; !chat.isGroup -&gt; true&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    val favoriteChats = filteredChats.filter { it.isFavorite }&#10;    val regularChats = filteredChats.filter { !it.isFavorite }&#10;    var topPad = WindowInsets.statusBars.asPaddingValues().calculateTopPadding()&#10;&#10;    // track scroll position&#10;    val listState = rememberLazyListState()&#10;    val isAtTop = remember { derivedStateOf { listState.firstVisibleItemIndex  == 0 &amp;&amp; listState.firstVisibleItemScrollOffset == 0 } }&#10;&#10;    // animate blur radius smoothly&#10;    val hazeBlurTop by animateDpAsState(&#10;        targetValue = if (isAtTop.value) 0.dp else 24.dp,&#10;        animationSpec = tween(durationMillis = 300, easing = FastOutSlowInEasing)&#10;    )&#10;&#10;    val groupedChats = remember(regularChats) {&#10;        groupChatsByDate(regularChats)&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Chat List with sections&#10;        LazyColumn(&#10;            state = listState,&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(MaterialTheme.colorScheme.background)&#10;                .hazeSource(state = hazeState)&#10;            ) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(topPad + 48.dp))&#10;            }&#10;&#10;            // Online Users Section&#10;            item {&#10;                OnlineUsersSection(onlineUsers)&#10;            }&#10;&#10;            // Favorites Section&#10;            if (favoriteChats.isNotEmpty()) {&#10;                item {&#10;                    SectionHeader(&quot;Favorites&quot;)&#10;                }&#10;&#10;                itemsIndexed(favoriteChats) { index, chat -&gt;&#10;                    ChatListItem(&#10;                        chat = chat,&#10;                        isFirst = index == 0,&#10;                        isLast = index == favoriteChats.size - 1,&#10;                        showFavoriteIcon = true,&#10;                        onChatClick = onChatClick&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;&#10;            // Grouped Messages&#10;            groupedChats.forEach { group -&gt;&#10;                item {&#10;                    SectionHeader(group.dateGroup)&#10;                }&#10;&#10;                itemsIndexed(group.chats) { index, chat -&gt;&#10;                    ChatListItem(&#10;                        chat = chat,&#10;                        isFirst = index == 0,&#10;                        isLast = index == group.chats.size - 1&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(80.dp))&#10;            }&#10;        }&#10;&#10;        // Haze Effect box&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .requiredHeight(topPad + 120.dp)&#10;                .hazeEffect(&#10;                    hazeState,&#10;                    style = hazeStyle(&#10;                        colorScheme = MaterialTheme.colorScheme.background,&#10;                        blurRadius = hazeBlurTop)&#10;                ) {&#10;                    progressive = HazeProgressive.verticalGradient(&#10;                        easing = EaseOutSine,&#10;                        startIntensity = 1f,&#10;                        endIntensity = 0f,&#10;                    )&#10;                }&#10;        )&#10;&#10;        // Top App Bar&#10;        TopAppBar(&#10;            colors = TopAppBarDefaults.largeTopAppBarColors(Color.Transparent),&#10;            title = {&#10;                Text(&#10;                    text = &quot;ChitChat&quot;,&#10;                    fontSize = 30.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            actions = {&#10;                IconButton(onClick = { /* Search action */ }) {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                }&#10;                IconButton(onClick = { /* Menu action */ }) {&#10;                    Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                }&#10;            }&#10;        )&#10;&#10;&#10;        // Floating Action Button&#10;        FloatingActionButton(&#10;            onClick = { /* New message action */ },&#10;            modifier = Modifier&#10;                .align(Alignment.BottomEnd)&#10;                .padding(bottom = 64.dp, end = 16.dp)&#10;                .zIndex(1f),&#10;            containerColor = MaterialTheme.colorScheme.primary&#10;        ) {&#10;            Icon(Icons.Default.Add, contentDescription = &quot;New Message&quot;)&#10;        }&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .padding(16.dp)&#10;                .zIndex(1f),&#10;        ) {&#10;            // Filter Chips&#10;            FilterChipsRow(&#10;                selectedFilters = selectedFilters,&#10;                onFilterChanged = { filter -&gt;&#10;                    selectedFilters = when {&#10;                        filter == &quot;all&quot; -&gt; setOf(&quot;all&quot;)&#10;                        filter == &quot;group&quot; &amp;&amp; selectedFilters.contains(&quot;chat&quot;) -&gt; {&#10;                            (selectedFilters - &quot;chat&quot; + filter).takeIf { &quot;all&quot; !in it } ?: setOf(filter)&#10;                        }&#10;                        filter == &quot;chat&quot; &amp;&amp; selectedFilters.contains(&quot;group&quot;) -&gt; {&#10;                            (selectedFilters - &quot;group&quot; + filter).takeIf { &quot;all&quot; !in it } ?: setOf(filter)&#10;                        }&#10;                        selectedFilters.contains(filter) -&gt; {&#10;                            val newFilters = selectedFilters - filter&#10;                            if (newFilters.isEmpty()) setOf(&quot;all&quot;) else newFilters&#10;                        }&#10;                        else -&gt; {&#10;                            val newFilters = selectedFilters - &quot;all&quot; + filter&#10;                            newFilters.takeIf { it.isNotEmpty() } ?: setOf(&quot;all&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OnlineUsersSection(onlineUsers: List&lt;OnlineUser&gt;) {&#10;    Column(modifier = Modifier.padding(horizontal = 0.dp, vertical = 16.dp)) {&#10;        SectionHeader(&quot;Online Users&quot;)&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        ) {&#10;            item {&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;            }&#10;            items(onlineUsers) { user -&gt;&#10;                OnlineUserItem(user)&#10;            }&#10;            item {&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OnlineUserItem(user: OnlineUser) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier.clickable { /* User profile action */ }&#10;    ) {&#10;        Box {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(56.dp)&#10;                    .clip(CircleShape)&#10;                    .background(user.avatarColor),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = user.name.first().toString(),&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 20.sp&#10;                )&#10;            }&#10;&#10;            // Online indicator&#10;            if (user.isOnline) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(16.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color.Green)&#10;                        .border(2.dp, MaterialTheme.colorScheme.surface, CircleShape)&#10;                        .align(Alignment.BottomEnd)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            text = user.name.split(&quot; &quot;).first(),&#10;            fontSize = 12.sp,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            maxLines = 1&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SectionHeader(title: String) {&#10;    Text(&#10;        text = title,&#10;        fontSize = 14.sp,&#10;        fontWeight = FontWeight.Medium,&#10;        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;        modifier = Modifier.padding(start = 16.dp, top = 0.dp, bottom = 8.dp, end = 16.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun FilterChipsRow(&#10;    selectedFilters: Set&lt;String&gt;,&#10;    onFilterChanged: (String) -&gt; Unit&#10;) {&#10;    val filters = listOf(&quot;all&quot;, &quot;unread&quot;, &quot;group&quot;, &quot;chat&quot;)&#10;&#10;    LazyRow(&#10;        modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(filters) { filter -&gt;&#10;            FilterChip(&#10;                onClick = { onFilterChanged(filter) },&#10;                label = {&#10;                    Text(&#10;                        text = filter.replaceFirstChar { it.uppercase() },&#10;                        fontSize = 14.sp&#10;                    )&#10;                },&#10;                selected = selectedFilters.contains(filter),&#10;                modifier = Modifier.height(32.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ChatListItem(&#10;    chat: ChatItem,&#10;    isFirst: Boolean = false,&#10;    isLast: Boolean = false,&#10;    showFavoriteIcon: Boolean = false,&#10;    onChatClick: () -&gt; Unit = {}&#10;) {&#10;    val shape = when {&#10;        isFirst &amp;&amp; isLast -&gt; RoundedCornerShape(16.dp)&#10;        isFirst -&gt; RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp, bottomEnd = 5.dp, bottomStart = 5.dp)&#10;        isLast -&gt; RoundedCornerShape(bottomStart = 16.dp, bottomEnd = 16.dp, topEnd = 5.dp, topStart = 5.dp)&#10;        else -&gt; RoundedCornerShape(5.dp)&#10;    }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp)&#10;            .padding(vertical = 1.dp)&#10;            .clickable { onChatClick() },&#10;        shape = shape,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar with destination indicator&#10;            Box {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .clip(CircleShape)&#10;                        .background(chat.avatarColor),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = if (chat.isGroup) &quot;G&quot; else chat.name.first().toString(),&#10;                        color = Color.White,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 18.sp&#10;                    )&#10;                }&#10;&#10;                // Destination indicator&#10;                val destinationIcon = when (chat.destination) {&#10;                    &quot;channel&quot; -&gt; Icons.Default.Notifications&#10;                    else -&gt; null&#10;                }&#10;&#10;                destinationIcon?.let { icon -&gt;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(16.dp)&#10;                            .clip(CircleShape)&#10;                            .background(MaterialTheme.colorScheme.primary)&#10;                            .align(Alignment.BottomEnd),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            icon,&#10;                            contentDescription = chat.destination,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(10.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Chat Info&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&#10;                            text = chat.name,&#10;                            fontWeight = FontWeight.Medium,&#10;                            fontSize = 16.sp&#10;                        )&#10;&#10;                        if (showFavoriteIcon) {&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Icon(&#10;                                Icons.Default.Star,&#10;                                contentDescription = &quot;Favorite&quot;,&#10;                                tint = Color(0xFFFFD700),&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        // Message status indicator (only for outgoing messages)&#10;                        if (chat.unreadCount == 0) { // Assuming outgoing messages have no unread count&#10;                            when (chat.messageStatus) {&#10;                                MessageStatus.SENT -&gt; {&#10;                                    Icon(&#10;                                        Icons.Default.Check,&#10;                                        contentDescription = &quot;Sent&quot;,&#10;                                        tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                        modifier = Modifier.size(14.dp)&#10;                                    )&#10;                                }&#10;                                MessageStatus.DELIVERED -&gt; {&#10;                                    // Double check for delivered&#10;                                    Row {&#10;                                        Icon(&#10;                                            Icons.Default.Check,&#10;                                            contentDescription = &quot;Delivered&quot;,&#10;                                            tint = MaterialTheme.colorScheme.primary,&#10;                                            modifier = Modifier.size(14.dp).offset(x = 2.dp)&#10;                                        )&#10;                                        Icon(&#10;                                            Icons.Default.Check,&#10;                                            contentDescription = &quot;Delivered&quot;,&#10;                                            tint = MaterialTheme.colorScheme.primary,&#10;                                            modifier = Modifier.size(14.dp).offset(x = (-2).dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        Text(&#10;                            text = chat.time,&#10;                            fontSize = 12.sp,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = chat.lastMessage,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    if (chat.unreadCount &gt; 0) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .size(20.dp)&#10;                                .clip(CircleShape)&#10;                                .background(MaterialTheme.colorScheme.primary),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(&#10;                                text = chat.unreadCount.toString(),&#10;                                color = Color.White,&#10;                                fontSize = 12.sp,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun groupChatsByDate(chats: List&lt;ChatItem&gt;): List&lt;GroupedChatItems&gt; {&#10;    val now = LocalDateTime.now()&#10;&#10;    return chats.groupBy { chat -&gt;&#10;        val daysBetween = ChronoUnit.DAYS.between(chat.dateTime.toLocalDate(), now.toLocalDate())&#10;        val weeksBetween = ChronoUnit.WEEKS.between(chat.dateTime, now)&#10;        val monthsBetween = ChronoUnit.MONTHS.between(chat.dateTime, now)&#10;        val yearsBetween = ChronoUnit.YEARS.between(chat.dateTime, now)&#10;&#10;        when {&#10;            daysBetween == 0L -&gt; &quot;Today&quot;&#10;            daysBetween == 1L -&gt; &quot;Yesterday&quot;&#10;            daysBetween &lt;= 7L -&gt; &quot;This Week&quot;&#10;            weeksBetween == 1L -&gt; &quot;Last Week&quot;&#10;            monthsBetween == 0L -&gt; &quot;This Month&quot;&#10;            monthsBetween == 1L -&gt; &quot;Last Month&quot;&#10;            yearsBetween == 0L -&gt; &quot;This Year&quot;&#10;            yearsBetween == 1L -&gt; &quot;Last Year&quot;&#10;            else -&gt; &quot;Older&quot;&#10;        }&#10;    }.map { (dateGroup, chats) -&gt;&#10;        GroupedChatItems(dateGroup, chats.sortedByDescending { it.dateTime })&#10;    }.sortedBy { group -&gt;&#10;        when (group.dateGroup) {&#10;            &quot;Today&quot; -&gt; 0&#10;            &quot;Yesterday&quot; -&gt; 1&#10;            &quot;This Week&quot; -&gt; 2&#10;            &quot;Last Week&quot; -&gt; 3&#10;            &quot;This Month&quot; -&gt; 4&#10;            &quot;Last Month&quot; -&gt; 5&#10;            &quot;This Year&quot; -&gt; 6&#10;            &quot;Last Year&quot; -&gt; 7&#10;            else -&gt; 8&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ChitChatPreview() {&#10;    ChitChatTheme {&#10;        ChitChatApp()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.moonbase.chitchat&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material.icons.outlined.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.zIndex&#10;import com.moonbase.chitchat.ui.theme.ChitChatTheme&#10;import com.moonbase.chitchat.ui.ChatDetailScreen&#10;import com.moonbase.chitchat.ui.ChatDetailData&#10;import com.moonbase.chitchat.ui.Message&#10;import dev.chrisbanes.haze.HazeDefaults&#10;import dev.chrisbanes.haze.HazeInputScale&#10;import dev.chrisbanes.haze.HazeProgressive&#10;import dev.chrisbanes.haze.HazeState&#10;import dev.chrisbanes.haze.HazeStyle&#10;import dev.chrisbanes.haze.HazeTint&#10;import dev.chrisbanes.haze.hazeEffect&#10;import dev.chrisbanes.haze.hazeSource&#10;import java.time.LocalDateTime&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;&#10;data class OnlineUser(&#10;    val id: String,&#10;    val name: String,&#10;    val avatarColor: Color = Color.Blue,&#10;    val isOnline: Boolean = true&#10;)&#10;&#10;enum class MessageStatus {&#10;    SENT,      // One check&#10;    DELIVERED  // Double check&#10;}&#10;&#10;data class ChatItem(&#10;    val id: String,&#10;    val name: String,&#10;    val lastMessage: String,&#10;    val time: String,&#10;    val dateTime: LocalDateTime,&#10;    val isGroup: Boolean,&#10;    val unreadCount: Int = 0,&#10;    val avatarColor: Color = Color.Blue,&#10;    val isFavorite: Boolean = false,&#10;    val messageStatus: MessageStatus = MessageStatus.DELIVERED,&#10;    val destination: String = &quot;individual&quot; // &quot;individual&quot;, &quot;group&quot;,  &quot;channel&quot;&#10;)&#10;&#10;data class GroupedChatItems(&#10;    val dateGroup: String,&#10;    val chats: List&lt;ChatItem&gt;&#10;)&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ChitChatTheme {&#10;                ChitChatApp()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun hazeStyle (&#10;    colorScheme: Color,&#10;    blurRadius: Dp = 16.dp,&#10;    noiseFactor: Float = HazeDefaults.noiseFactor&#10;): HazeStyle {&#10;    return HazeStyle(&#10;        backgroundColor = colorScheme,&#10;        tints = listOf(HazeTint(colorScheme)),&#10;        blurRadius = blurRadius,&#10;        noiseFactor = noiseFactor&#10;    )&#10;}&#10;&#10;fun formatDateForChat(dateTime: LocalDateTime): String {&#10;    val now = LocalDateTime.now()&#10;    val daysBetween = ChronoUnit.DAYS.between(dateTime.toLocalDate(), now.toLocalDate())&#10;    val yearsBetween = ChronoUnit.YEARS.between(dateTime, now)&#10;&#10;    return when {&#10;        daysBetween == 0L -&gt; dateTime.format(DateTimeFormatter.ofPattern(&quot;h:mm a&quot;))&#10;        daysBetween == 1L -&gt; &quot;Yesterday&quot;&#10;        daysBetween &lt;= 7L -&gt; dateTime.format(DateTimeFormatter.ofPattern(&quot;EEEE&quot;))&#10;        yearsBetween == 0L -&gt; dateTime.format(DateTimeFormatter.ofPattern(&quot;MMM d&quot;))&#10;        else -&gt; dateTime.format(DateTimeFormatter.ofPattern(&quot;MMM d, yyyy&quot;))&#10;    }&#10;}&#10;&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChitChatApp() {&#10;    var selectedFilters by remember { mutableStateOf(setOf(&quot;all&quot;)) }&#10;    var selectedChat by remember { mutableStateOf&lt;ChatItem?&gt;(null) }&#10;    val hazeState = remember { HazeState() }&#10;&#10;    // Navigation: Show chat detail if a chat is selected, otherwise show chat list&#10;    if (selectedChat != null) {&#10;        val chatDetailData = createChatDetailData(selectedChat!!)&#10;        ChatDetailScreen(&#10;            chatData = chatDetailData,&#10;            onBackClick = { selectedChat = null }&#10;        )&#10;    } else {&#10;        ChatListScreen(&#10;            selectedFilters = selectedFilters,&#10;            onFilterChanged = { filter -&gt;&#10;                selectedFilters = when {&#10;                    filter == &quot;all&quot; -&gt; setOf(&quot;all&quot;)&#10;                    filter == &quot;group&quot; &amp;&amp; selectedFilters.contains(&quot;chat&quot;) -&gt; {&#10;                        (selectedFilters - &quot;chat&quot; + filter).takeIf { &quot;all&quot; !in it } ?: setOf(filter)&#10;                    }&#10;                    filter == &quot;chat&quot; &amp;&amp; selectedFilters.contains(&quot;group&quot;) -&gt; {&#10;                        (selectedFilters - &quot;group&quot; + filter).takeIf { &quot;all&quot; !in it } ?: setOf(filter)&#10;                    }&#10;                    selectedFilters.contains(filter) -&gt; {&#10;                        val newFilters = selectedFilters - filter&#10;                        if (newFilters.isEmpty()) setOf(&quot;all&quot;) else newFilters&#10;                    }&#10;                    else -&gt; {&#10;                        val newFilters = selectedFilters - &quot;all&quot; + filter&#10;                        newFilters.takeIf { it.isNotEmpty() } ?: setOf(&quot;all&quot;)&#10;                    }&#10;                }&#10;            },&#10;            onChatClick = { chat -&gt; selectedChat = chat },&#10;            hazeState = hazeState&#10;        )&#10;    }&#10;}&#10;&#10;// Helper function to create sample messages for chat detail&#10;fun createChatDetailData(chatItem: ChatItem): ChatDetailData {&#10;    val now = LocalDateTime.now()&#10;    &#10;    val sampleMessages = when (chatItem.id) {&#10;        &quot;1&quot; -&gt; listOf(&#10;            Message(&quot;m1&quot;, &quot;Hey, how are you?&quot;, now.minusHours(3), false, &quot;John Doe&quot;, chatItem.avatarColor),&#10;            Message(&quot;m2&quot;, &quot;I'm doing great! How about you?&quot;, now.minusHours(2).minusMinutes(45), true),&#10;            Message(&quot;m3&quot;, &quot;Pretty good, just working on some projects&quot;, now.minusHours(2).minusMinutes(30), false, &quot;John Doe&quot;, chatItem.avatarColor),&#10;            Message(&quot;m4&quot;, &quot;That sounds interesting! What kind of projects?&quot;, now.minusHours(2).minusMinutes(15), true),&#10;            Message(&quot;m5&quot;, &quot;Mostly mobile app development. I'm learning Jetpack Compose&quot;, now.minusHours(2), false, &quot;John Doe&quot;, chatItem.avatarColor)&#10;        )&#10;        &quot;2&quot; -&gt; listOf(&#10;            Message(&quot;g1&quot;, &quot;Don't forget about dinner tonight!&quot;, now.minusHours(4), false, &quot;Mom&quot;, Color(0xFFE91E63)),&#10;            Message(&quot;g2&quot;, &quot;What time again?&quot;, now.minusHours(3).minusMinutes(45), false, &quot;Dad&quot;, Color(0xFF2196F3)),&#10;            Message(&quot;g3&quot;, &quot;7 PM, as usual &quot;, now.minusHours(3).minusMinutes(30), false, &quot;Mom&quot;, Color(0xFFE91E63)),&#10;            Message(&quot;g4&quot;, &quot;I'll be there!&quot;, now.minusHours(3).minusMinutes(15), true),&#10;            Message(&quot;g5&quot;, &quot;Perfect! See you all then&quot;, now.minusHours(3), false, &quot;Mom&quot;, Color(0xFFE91E63))&#10;        )&#10;        else -&gt; listOf(&#10;            Message(&quot;default1&quot;, &quot;Hello!&quot;, now.minusHours(1), false, chatItem.name, chatItem.avatarColor),&#10;            Message(&quot;default2&quot;, &quot;Hi there!&quot;, now.minusMinutes(30), true),&#10;            Message(&quot;default3&quot;, chatItem.lastMessage, now.minusMinutes(15), false, chatItem.name, chatItem.avatarColor)&#10;        )&#10;    }&#10;    &#10;    return ChatDetailData(&#10;        id = chatItem.id,&#10;        name = chatItem.name,&#10;        isGroup = chatItem.isGroup,&#10;        avatarColor = chatItem.avatarColor,&#10;        messages = sampleMessages&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChatListScreen(&#10;    selectedFilters: Set&lt;String&gt;,&#10;    onFilterChanged: (String) -&gt; Unit,&#10;    onChatClick: (ChatItem) -&gt; Unit,&#10;    hazeState: HazeState&#10;) {&#10;    val onlineUsers = remember {&#10;        listOf(&#10;            OnlineUser(&quot;u1&quot;, &quot;Alice&quot;, Color(0xFF9C27B0)),&#10;            OnlineUser(&quot;u2&quot;, &quot;Bob&quot;, Color(0xFF2196F3)),&#10;            OnlineUser(&quot;u3&quot;, &quot;Charlie&quot;, Color(0xFF4CAF50)),&#10;            OnlineUser(&quot;u4&quot;, &quot;Diana&quot;, Color(0xFFFF9800)),&#10;            OnlineUser(&quot;u5&quot;, &quot;Eve&quot;, Color(0xFFF44336)),&#10;            OnlineUser(&quot;u6&quot;, &quot;Frank&quot;, Color(0xFF795548)),&#10;            OnlineUser(&quot;u7&quot;, &quot;Grace&quot;, Color(0xFF607D8B))&#10;        )&#10;    }&#10;&#10;    val now = LocalDateTime.now()&#10;    val sampleChats = remember {&#10;        listOf(&#10;            ChatItem(&quot;1&quot;, &quot;John Doe&quot;, &quot;Hey, how are you?&quot;, &quot;2:30 PM&quot;, now.minusHours(2), false, 2, Color.Blue, true, MessageStatus.DELIVERED, &quot;individual&quot;),&#10;            ChatItem(&quot;2&quot;, &quot;Family Group&quot;, &quot;Mom: Dinner at 7 PM&quot;, &quot;1:45 PM&quot;, now.minusHours(3), true, 5, Color.Green, true, MessageStatus.SENT, &quot;group&quot;),&#10;            ChatItem(&quot;3&quot;, &quot;Sarah Wilson&quot;, &quot;Thanks for the help!&quot;, &quot;12:20 PM&quot;, now.minusHours(5), false, 0, Color(0xFF9C27B0), false, MessageStatus.DELIVERED, &quot;individual&quot;),&#10;            ChatItem(&quot;4&quot;, &quot;Work Team&quot;, &quot;Meeting tomorrow at 10 AM&quot;, formatDateForChat(now.minusDays(1).minusHours(2)), now.minusDays(1).minusHours(2), true, 1, Color(0xFFFF9800), true, MessageStatus.DELIVERED, &quot;group&quot;),&#10;            ChatItem(&quot;5&quot;, &quot;Mike Johnson&quot;, &quot;Sure, see you then&quot;, formatDateForChat(now.minusDays(1).minusHours(5)), now.minusDays(1).minusHours(5), false, 0, Color.Red, false, MessageStatus.SENT, &quot;individual&quot;),&#10;            ChatItem(&quot;6&quot;, &quot;College Friends&quot;, &quot;Anyone up for movies?&quot;, formatDateForChat(now.minusDays(2)), now.minusDays(2), true, 3, Color(0xFF009688), false, MessageStatus.DELIVERED, &quot;group&quot;),&#10;            ChatItem(&quot;7&quot;, &quot;Alice Brown&quot;, &quot;Happy birthday! &quot;, formatDateForChat(now.minusDays(8)), now.minusDays(8), false, 1, Color(0xFFE91E63), false, MessageStatus.DELIVERED, &quot;individual&quot;),&#10;            ChatItem(&quot;8&quot;, &quot;Gaming Squad&quot;, &quot;New game tonight?&quot;, formatDateForChat(now.minusDays(10)), now.minusDays(10), true, 7, Color.Cyan, false, MessageStatus.SENT, &quot;group&quot;),&#10;            ChatItem(&quot;9&quot;, &quot;Mom&quot;, &quot;Don't forget to call&quot;, formatDateForChat(now.minusDays(15)), now.minusDays(15), false, 0, Color(0xFF8BC34A), true, MessageStatus.DELIVERED, &quot;individual&quot;),&#10;            ChatItem(&quot;10&quot;, &quot;Project Team&quot;, &quot;Final presentation ready&quot;, formatDateForChat(now.minusMonths(1).minusDays(5)), now.minusMonths(1).minusDays(5), true, 0, Color(0xFF3F51B5), false, MessageStatus.DELIVERED, &quot;group&quot;),&#10;            ChatItem(&quot;11&quot;, &quot;Old Friend&quot;, &quot;Long time no see!&quot;, formatDateForChat(now.minusYears(1).minusMonths(2)), now.minusYears(1).minusMonths(2), false, 0, Color(0xFF795548), false, MessageStatus.SENT, &quot;individual&quot;),&#10;            ChatItem(&quot;12&quot;, &quot;Support Channel&quot;, &quot;Update available&quot;, formatDateForChat(now.minusYears(1).minusMonths(6)), now.minusYears(1).minusMonths(6), false, 0, Color(0xFF607D8B), false, MessageStatus.DELIVERED, &quot;channel&quot;)&#10;        )&#10;    }&#10;&#10;    val filteredChats = remember(selectedFilters, sampleChats) {&#10;        sampleChats.filter { chat -&gt;&#10;            when {&#10;                selectedFilters.contains(&quot;all&quot;) -&gt; true&#10;                selectedFilters.contains(&quot;unread&quot;) &amp;&amp; chat.unreadCount &gt; 0 -&gt; true&#10;                selectedFilters.contains(&quot;group&quot;) &amp;&amp; chat.isGroup -&gt; true&#10;                selectedFilters.contains(&quot;chat&quot;) &amp;&amp; !chat.isGroup -&gt; true&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    val favoriteChats = filteredChats.filter { it.isFavorite }&#10;    val regularChats = filteredChats.filter { !it.isFavorite }&#10;    var topPad = WindowInsets.statusBars.asPaddingValues().calculateTopPadding()&#10;&#10;    // track scroll position&#10;    val listState = rememberLazyListState()&#10;    val isAtTop = remember { derivedStateOf { listState.firstVisibleItemIndex  == 0 &amp;&amp; listState.firstVisibleItemScrollOffset == 0 } }&#10;&#10;    // animate blur radius smoothly&#10;    val hazeBlurTop by animateDpAsState(&#10;        targetValue = if (isAtTop.value) 0.dp else 24.dp,&#10;        animationSpec = tween(durationMillis = 300, easing = FastOutSlowInEasing)&#10;    )&#10;&#10;    val groupedChats = remember(regularChats) {&#10;        groupChatsByDate(regularChats)&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        // Chat List with sections&#10;        LazyColumn(&#10;            state = listState,&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(MaterialTheme.colorScheme.background)&#10;                .hazeSource(state = hazeState)&#10;            ) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(topPad + 48.dp))&#10;            }&#10;&#10;            // Online Users Section&#10;            item {&#10;                OnlineUsersSection(onlineUsers)&#10;            }&#10;&#10;            // Favorites Section&#10;            if (favoriteChats.isNotEmpty()) {&#10;                item {&#10;                    SectionHeader(&quot;Favorites&quot;)&#10;                }&#10;&#10;                itemsIndexed(favoriteChats) { index, chat -&gt;&#10;                    ChatListItem(&#10;                        chat = chat,&#10;                        isFirst = index == 0,&#10;                        isLast = index == favoriteChats.size - 1,&#10;                        showFavoriteIcon = true,&#10;                        onChatClick = onChatClick&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;&#10;            // Grouped Messages&#10;            groupedChats.forEach { group -&gt;&#10;                item {&#10;                    SectionHeader(group.dateGroup)&#10;                }&#10;&#10;                itemsIndexed(group.chats) { index, chat -&gt;&#10;                    ChatListItem(&#10;                        chat = chat,&#10;                        isFirst = index == 0,&#10;                        isLast = index == group.chats.size - 1,&#10;                        onChatClick = { onChatClick(chat) }&#10;                    )&#10;                }&#10;&#10;                item {&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;&#10;&#10;            item {&#10;                Spacer(modifier = Modifier.height(80.dp))&#10;            }&#10;        }&#10;&#10;        // Haze Effect box&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .requiredHeight(topPad + 120.dp)&#10;                .hazeEffect(&#10;                    hazeState,&#10;                    style = hazeStyle(&#10;                        colorScheme = MaterialTheme.colorScheme.background,&#10;                        blurRadius = hazeBlurTop)&#10;                ) {&#10;                    progressive = HazeProgressive.verticalGradient(&#10;                        easing = EaseOutSine,&#10;                        startIntensity = 1f,&#10;                        endIntensity = 0f,&#10;                    )&#10;                }&#10;        )&#10;&#10;        // Top App Bar&#10;        TopAppBar(&#10;            colors = TopAppBarDefaults.largeTopAppBarColors(Color.Transparent),&#10;            title = {&#10;                Text(&#10;                    text = &quot;ChitChat&quot;,&#10;                    fontSize = 30.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            actions = {&#10;                IconButton(onClick = { /* Search action */ }) {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                }&#10;                IconButton(onClick = { /* Menu action */ }) {&#10;                    Icon(Icons.Default.Menu, contentDescription = &quot;Menu&quot;)&#10;                }&#10;            }&#10;        )&#10;&#10;&#10;        // Floating Action Button&#10;        FloatingActionButton(&#10;            onClick = { /* New message action */ },&#10;            modifier = Modifier&#10;                .align(Alignment.BottomEnd)&#10;                .padding(bottom = 64.dp, end = 16.dp)&#10;                .zIndex(1f),&#10;            containerColor = MaterialTheme.colorScheme.primary&#10;        ) {&#10;            Icon(Icons.Default.Add, contentDescription = &quot;New Message&quot;)&#10;        }&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .padding(16.dp)&#10;                .zIndex(1f),&#10;        ) {&#10;            // Filter Chips&#10;            FilterChipsRow(&#10;                selectedFilters = selectedFilters,&#10;                onFilterChanged = { filter -&gt;&#10;                    selectedFilters = when {&#10;                        filter == &quot;all&quot; -&gt; setOf(&quot;all&quot;)&#10;                        filter == &quot;group&quot; &amp;&amp; selectedFilters.contains(&quot;chat&quot;) -&gt; {&#10;                            (selectedFilters - &quot;chat&quot; + filter).takeIf { &quot;all&quot; !in it } ?: setOf(filter)&#10;                        }&#10;                        filter == &quot;chat&quot; &amp;&amp; selectedFilters.contains(&quot;group&quot;) -&gt; {&#10;                            (selectedFilters - &quot;group&quot; + filter).takeIf { &quot;all&quot; !in it } ?: setOf(filter)&#10;                        }&#10;                        selectedFilters.contains(filter) -&gt; {&#10;                            val newFilters = selectedFilters - filter&#10;                            if (newFilters.isEmpty()) setOf(&quot;all&quot;) else newFilters&#10;                        }&#10;                        else -&gt; {&#10;                            val newFilters = selectedFilters - &quot;all&quot; + filter&#10;                            newFilters.takeIf { it.isNotEmpty() } ?: setOf(&quot;all&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OnlineUsersSection(onlineUsers: List&lt;OnlineUser&gt;) {&#10;    Column(modifier = Modifier.padding(horizontal = 0.dp, vertical = 16.dp)) {&#10;        SectionHeader(&quot;Online Users&quot;)&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;        ) {&#10;            item {&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;            }&#10;            items(onlineUsers) { user -&gt;&#10;                OnlineUserItem(user)&#10;            }&#10;            item {&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun OnlineUserItem(user: OnlineUser) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier.clickable { /* User profile action */ }&#10;    ) {&#10;        Box {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(56.dp)&#10;                    .clip(CircleShape)&#10;                    .background(user.avatarColor),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = user.name.first().toString(),&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 20.sp&#10;                )&#10;            }&#10;&#10;            // Online indicator&#10;            if (user.isOnline) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(16.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color.Green)&#10;                        .border(2.dp, MaterialTheme.colorScheme.surface, CircleShape)&#10;                        .align(Alignment.BottomEnd)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            text = user.name.split(&quot; &quot;).first(),&#10;            fontSize = 12.sp,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;            maxLines = 1&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SectionHeader(title: String) {&#10;    Text(&#10;        text = title,&#10;        fontSize = 14.sp,&#10;        fontWeight = FontWeight.Medium,&#10;        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;        modifier = Modifier.padding(start = 16.dp, top = 0.dp, bottom = 8.dp, end = 16.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun FilterChipsRow(&#10;    selectedFilters: Set&lt;String&gt;,&#10;    onFilterChanged: (String) -&gt; Unit&#10;) {&#10;    val filters = listOf(&quot;all&quot;, &quot;unread&quot;, &quot;group&quot;, &quot;chat&quot;)&#10;&#10;    LazyRow(&#10;        modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),&#10;        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(filters) { filter -&gt;&#10;            FilterChip(&#10;                onClick = { onFilterChanged(filter) },&#10;                label = {&#10;                    Text(&#10;                        text = filter.replaceFirstChar { it.uppercase() },&#10;                        fontSize = 14.sp&#10;                    )&#10;                },&#10;                selected = selectedFilters.contains(filter),&#10;                modifier = Modifier.height(32.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ChatListItem(&#10;    chat: ChatItem,&#10;    isFirst: Boolean = false,&#10;    isLast: Boolean = false,&#10;    showFavoriteIcon: Boolean = false,&#10;    onChatClick: (ChatItem) -&gt; Unit = {}&#10;) {&#10;    val shape = when {&#10;        isFirst &amp;&amp; isLast -&gt; RoundedCornerShape(16.dp)&#10;        isFirst -&gt; RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp, bottomEnd = 5.dp, bottomStart = 5.dp)&#10;        isLast -&gt; RoundedCornerShape(bottomStart = 16.dp, bottomEnd = 16.dp, topEnd = 5.dp, topStart = 5.dp)&#10;        else -&gt; RoundedCornerShape(5.dp)&#10;    }&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp)&#10;            .padding(vertical = 1.dp)&#10;            .clickable { onChatClick(chat) },&#10;        shape = shape,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainer&#10;        )&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Avatar with destination indicator&#10;            Box {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .clip(CircleShape)&#10;                        .background(chat.avatarColor),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = if (chat.isGroup) &quot;G&quot; else chat.name.first().toString(),&#10;                        color = Color.White,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 18.sp&#10;                    )&#10;                }&#10;&#10;                // Destination indicator&#10;                val destinationIcon = when (chat.destination) {&#10;                    &quot;channel&quot; -&gt; Icons.Default.Notifications&#10;                    else -&gt; null&#10;                }&#10;&#10;                destinationIcon?.let { icon -&gt;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(16.dp)&#10;                            .clip(CircleShape)&#10;                            .background(MaterialTheme.colorScheme.primary)&#10;                            .align(Alignment.BottomEnd),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Icon(&#10;                            icon,&#10;                            contentDescription = chat.destination,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(10.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Chat Info&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&#10;                            text = chat.name,&#10;                            fontWeight = FontWeight.Medium,&#10;                            fontSize = 16.sp&#10;                        )&#10;&#10;                        if (showFavoriteIcon) {&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Icon(&#10;                                Icons.Default.Star,&#10;                                contentDescription = &quot;Favorite&quot;,&#10;                                tint = Color(0xFFFFD700),&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        // Message status indicator (only for outgoing messages)&#10;                        if (chat.unreadCount == 0) { // Assuming outgoing messages have no unread count&#10;                            when (chat.messageStatus) {&#10;                                MessageStatus.SENT -&gt; {&#10;                                    Icon(&#10;                                        Icons.Default.Check,&#10;                                        contentDescription = &quot;Sent&quot;,&#10;                                        tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                        modifier = Modifier.size(14.dp)&#10;                                    )&#10;                                }&#10;                                MessageStatus.DELIVERED -&gt; {&#10;                                    // Double check for delivered&#10;                                    Row {&#10;                                        Icon(&#10;                                            Icons.Default.Check,&#10;                                            contentDescription = &quot;Delivered&quot;,&#10;                                            tint = MaterialTheme.colorScheme.primary,&#10;                                            modifier = Modifier.size(14.dp).offset(x = 2.dp)&#10;                                        )&#10;                                        Icon(&#10;                                            Icons.Default.Check,&#10;                                            contentDescription = &quot;Delivered&quot;,&#10;                                            tint = MaterialTheme.colorScheme.primary,&#10;                                            modifier = Modifier.size(14.dp).offset(x = (-2).dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        Text(&#10;                            text = chat.time,&#10;                            fontSize = 12.sp,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = chat.lastMessage,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;&#10;                    if (chat.unreadCount &gt; 0) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .size(20.dp)&#10;                                .clip(CircleShape)&#10;                                .background(MaterialTheme.colorScheme.primary),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(&#10;                                text = chat.unreadCount.toString(),&#10;                                color = Color.White,&#10;                                fontSize = 12.sp,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;fun groupChatsByDate(chats: List&lt;ChatItem&gt;): List&lt;GroupedChatItems&gt; {&#10;    val now = LocalDateTime.now()&#10;&#10;    return chats.groupBy { chat -&gt;&#10;        val daysBetween = ChronoUnit.DAYS.between(chat.dateTime.toLocalDate(), now.toLocalDate())&#10;        val weeksBetween = ChronoUnit.WEEKS.between(chat.dateTime, now)&#10;        val monthsBetween = ChronoUnit.MONTHS.between(chat.dateTime, now)&#10;        val yearsBetween = ChronoUnit.YEARS.between(chat.dateTime, now)&#10;&#10;        when {&#10;            daysBetween == 0L -&gt; &quot;Today&quot;&#10;            daysBetween == 1L -&gt; &quot;Yesterday&quot;&#10;            daysBetween &lt;= 7L -&gt; &quot;This Week&quot;&#10;            weeksBetween == 1L -&gt; &quot;Last Week&quot;&#10;            monthsBetween == 0L -&gt; &quot;This Month&quot;&#10;            monthsBetween == 1L -&gt; &quot;Last Month&quot;&#10;            yearsBetween == 0L -&gt; &quot;This Year&quot;&#10;            yearsBetween == 1L -&gt; &quot;Last Year&quot;&#10;            else -&gt; &quot;Older&quot;&#10;        }&#10;    }.map { (dateGroup, chats) -&gt;&#10;        GroupedChatItems(dateGroup, chats.sortedByDescending { it.dateTime })&#10;    }.sortedBy { group -&gt;&#10;        when (group.dateGroup) {&#10;            &quot;Today&quot; -&gt; 0&#10;            &quot;Yesterday&quot; -&gt; 1&#10;            &quot;This Week&quot; -&gt; 2&#10;            &quot;Last Week&quot; -&gt; 3&#10;            &quot;This Month&quot; -&gt; 4&#10;            &quot;Last Month&quot; -&gt; 5&#10;            &quot;This Year&quot; -&gt; 6&#10;            &quot;Last Year&quot; -&gt; 7&#10;            else -&gt; 8&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ChitChatPreview() {&#10;    ChitChatTheme {&#10;        ChitChatApp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/moonbase/chitchat/ui/ChatDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/moonbase/chitchat/ui/ChatDetailScreen.kt" />
              <option name="updatedContent" value="package com.moonbase.chitchat.ui&#10;&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.zIndex&#10;import dev.chrisbanes.haze.*&#10;import java.time.LocalDateTime&#10;import java.time.format.DateTimeFormatter&#10;&#10;data class Message(&#10;    val id: String,&#10;    val text: String,&#10;    val timestamp: LocalDateTime,&#10;    val isFromUser: Boolean,&#10;    val senderName: String? = null,&#10;    val senderColor: Color = Color.Blue&#10;)&#10;&#10;data class ChatDetailData(&#10;    val id: String,&#10;    val name: String,&#10;    val isGroup: Boolean,&#10;    val avatarColor: Color,&#10;    val messages: List&lt;Message&gt;&#10;)&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ChatDetailScreen(&#10;    chatData: ChatDetailData,&#10;    onBackClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var messageText by remember { mutableStateOf(&quot;&quot;) }&#10;    val hazeState = remember { HazeState() }&#10;    val listState = rememberLazyListState()&#10;    &#10;    // Scroll to bottom when new messages are added&#10;    LaunchedEffect(chatData.messages.size) {&#10;        if (chatData.messages.isNotEmpty()) {&#10;            listState.animateScrollToItem(chatData.messages.size - 1)&#10;        }&#10;    }&#10;&#10;    val topPadding = WindowInsets.statusBars.asPaddingValues().calculateTopPadding()&#10;    val bottomPadding = WindowInsets.navigationBars.asPaddingValues().calculateBottomPadding()&#10;&#10;    // Track scroll position for haze effect&#10;    val isAtTop = remember { &#10;        derivedStateOf { &#10;            listState.firstVisibleItemIndex == 0 &amp;&amp; listState.firstVisibleItemScrollOffset == 0 &#10;        } &#10;    }&#10;&#10;    val hazeBlurTop by animateDpAsState(&#10;        targetValue = if (isAtTop.value) 0.dp else 24.dp,&#10;        animationSpec = tween(durationMillis = 300, easing = FastOutSlowInEasing)&#10;    )&#10;&#10;    Box(modifier = modifier.fillMaxSize()) {&#10;        // Background&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(MaterialTheme.colorScheme.background)&#10;        )&#10;&#10;        // Messages List&#10;        LazyColumn(&#10;            state = listState,&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .hazeSource(state = hazeState)&#10;                .padding(horizontal = 16.dp),&#10;            contentPadding = PaddingValues(&#10;                top = topPadding + 80.dp,&#10;                bottom = bottomPadding + 80.dp&#10;            ),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            items(chatData.messages) { message -&gt;&#10;                MessageBubble(&#10;                    message = message,&#10;                    isGroup = chatData.isGroup&#10;                )&#10;            }&#10;        }&#10;&#10;        // Top App Bar with Haze Effect&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .requiredHeight(topPadding + 80.dp)&#10;                .hazeEffect(&#10;                    hazeState,&#10;                    style = HazeStyle(&#10;                        backgroundColor = MaterialTheme.colorScheme.background,&#10;                        tints = listOf(HazeTint(MaterialTheme.colorScheme.background)),&#10;                        blurRadius = hazeBlurTop,&#10;                        noiseFactor = HazeDefaults.noiseFactor&#10;                    )&#10;                ) {&#10;                    progressive = HazeProgressive.verticalGradient(&#10;                        easing = EaseOutSine,&#10;                        startIntensity = 1f,&#10;                        endIntensity = 0f,&#10;                    )&#10;                }&#10;        )&#10;&#10;        // Top App Bar Content&#10;        TopAppBar(&#10;            colors = TopAppBarDefaults.topAppBarColors(Color.Transparent),&#10;            title = {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.clickable { /* Open chat info */ }&#10;                ) {&#10;                    // Chat Avatar&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(40.dp)&#10;                            .clip(CircleShape)&#10;                            .background(chatData.avatarColor),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (chatData.isGroup) &quot;G&quot; else chatData.name.first().toString(),&#10;                            color = Color.White,&#10;                            fontWeight = FontWeight.Bold,&#10;                            fontSize = 16.sp&#10;                        )&#10;                    }&#10;                    &#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    &#10;                    Column {&#10;                        Text(&#10;                            text = chatData.name,&#10;                            fontSize = 18.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        if (chatData.isGroup) {&#10;                            Text(&#10;                                text = &quot;Group • ${chatData.messages.map { it.senderName }.distinct().size} members&quot;,&#10;                                fontSize = 12.sp,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        } else {&#10;                            Text(&#10;                                text = &quot;Online&quot;,&#10;                                fontSize = 12.sp,&#10;                                color = MaterialTheme.colorScheme.primary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(&#10;                        Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;&#10;                    )&#10;                }&#10;            },&#10;            actions = {&#10;                IconButton(onClick = { /* Voice call */ }) {&#10;                    Icon(Icons.Default.Call, contentDescription = &quot;Voice Call&quot;)&#10;                }&#10;                IconButton(onClick = { /* Video call */ }) {&#10;                    Icon(Icons.Default.Videocam, contentDescription = &quot;Video Call&quot;)&#10;                }&#10;                IconButton(onClick = { /* More options */ }) {&#10;                    Icon(Icons.Default.MoreVert, contentDescription = &quot;More&quot;)&#10;                }&#10;            }&#10;        )&#10;&#10;        // Message Input Area&#10;        Card(&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;                .zIndex(1f),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.surface&#10;            )&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(12.dp),&#10;                verticalAlignment = Alignment.Bottom&#10;            ) {&#10;                // Attachment button&#10;                IconButton(&#10;                    onClick = { /* Attachment */ },&#10;                    modifier = Modifier.size(40.dp)&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.AttachFile,&#10;                        contentDescription = &quot;Attach File&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;                &#10;                // Message input field&#10;                OutlinedTextField(&#10;                    value = messageText,&#10;                    onValueChange = { messageText = it },&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .padding(horizontal = 8.dp),&#10;                    placeholder = { Text(&quot;Type a message...&quot;) },&#10;                    maxLines = 4,&#10;                    shape = RoundedCornerShape(24.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                        unfocusedBorderColor = MaterialTheme.colorScheme.outline&#10;                    )&#10;                )&#10;                &#10;                // Send button&#10;                IconButton(&#10;                    onClick = {&#10;                        if (messageText.isNotBlank()) {&#10;                            // Handle send message&#10;                            messageText = &quot;&quot;&#10;                        }&#10;                    },&#10;                    modifier = Modifier.size(40.dp)&#10;                ) {&#10;                    Icon(&#10;                        Icons.AutoMirrored.Filled.Send,&#10;                        contentDescription = &quot;Send Message&quot;,&#10;                        tint = if (messageText.isNotBlank()) &#10;                            MaterialTheme.colorScheme.primary &#10;                        else &#10;                            MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MessageBubble(&#10;    message: Message,&#10;    isGroup: Boolean&#10;) {&#10;    val isFromUser = message.isFromUser&#10;    &#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalAlignment = if (isFromUser) Alignment.End else Alignment.Start&#10;    ) {&#10;        // Show sender name for group chats (non-user messages)&#10;        if (isGroup &amp;&amp; !isFromUser &amp;&amp; message.senderName != null) {&#10;            Text(&#10;                text = message.senderName,&#10;                fontSize = 12.sp,&#10;                color = message.senderColor,&#10;                fontWeight = FontWeight.Medium,&#10;                modifier = Modifier.padding(&#10;                    start = if (isFromUser) 0.dp else 16.dp,&#10;                    end = if (isFromUser) 16.dp else 0.dp,&#10;                    bottom = 2.dp&#10;                )&#10;            )&#10;        }&#10;        &#10;        Card(&#10;            modifier = Modifier.widthIn(max = 280.dp),&#10;            shape = RoundedCornerShape(&#10;                topStart = if (isFromUser) 16.dp else 4.dp,&#10;                topEnd = if (isFromUser) 4.dp else 16.dp,&#10;                bottomStart = 16.dp,&#10;                bottomEnd = 16.dp&#10;            ),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = if (isFromUser) &#10;                    MaterialTheme.colorScheme.primary &#10;                else &#10;                    MaterialTheme.colorScheme.surfaceContainer&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(12.dp)&#10;            ) {&#10;                Text(&#10;                    text = message.text,&#10;                    color = if (isFromUser) Color.White else MaterialTheme.colorScheme.onSurface,&#10;                    fontSize = 14.sp&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                &#10;                Text(&#10;                    text = message.timestamp.format(DateTimeFormatter.ofPattern(&quot;h:mm a&quot;)),&#10;                    fontSize = 10.sp,&#10;                    color = if (isFromUser) &#10;                        Color.White.copy(alpha = 0.7f) &#10;                    else &#10;                        MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.align(Alignment.End)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;haze = &quot;1.6.9&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;haze = { group = &quot;dev.chrisbanes.haze&quot;, name = &quot;haze&quot;, version.ref = &quot;haze&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>